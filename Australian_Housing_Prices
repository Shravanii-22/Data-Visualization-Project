#Libraries imported
library(shiny)
library(shinydashboard)
library(leaflet)
library(dplyr)
library(plotly)
library(ggplot2)
library(lubridate)
library(caret)
library(randomForest)

# Read the dataset from the CSV file
dataset <- read.csv("dep.csv")

#Converted Date column to DATE as it was string before
dataset$Date <- as.Date(dataset$Date)

# Set factor levels in the desired order.
dataset$Regionname <- factor(dataset$Regionname)

# Define a color palette for Regionname
region_colors <- colorFactor(
  palette = c("#ED6333", "#338DED", "#6CD75E", "orange", "#B47DEC", "#EC7DD6", "#F7F97D", "brown"),
  domain = c(
    "Western Metropolitan", "Northern Metropolitan", "Southern Metropolitan", "Eastern Metropolitan",
    "South-Eastern Metropolitan", "Eastern Victoria", "Northern Victoria", "Western Victoria"
  )
)

# Define additional map tile providers
map_tile_providers <- list(
  "Satellite" = providers$Esri.WorldImagery,
  "Light" = providers$CartoDB.Positron,
  "Dark" = providers$CartoDB.DarkMatter,
  "OpenStreetMap" = providers$OpenStreetMap,
  "Stamen Toner" = providers$Stamen.Toner,
  "Stamen Watercolor" = providers$Stamen.Watercolor
)

# Define the UI
ui <- fluidPage(
  tags$head(
    tags$style(
      HTML("
        body {
          background-color: #D6DFF3; /* Light Yellow */
          font-family: 'Georgia', serif;
        }
      ")
    )
  ),
  titlePanel(
    HTML('
    <style>
      .title-panel {
        background-image: url("https://assets.kpmg.com/is/image/kpmg/media-release-banner:cq5dam.web.1400.350");
        background-size: cover;
        padding: 40px; /* Adjust the padding */
        text-align: center;
      }
      .title-text {
        font-size: 30px; /* Adjust the font size */
        color: white; /* Adjust the text color */
        text-shadow: 2px 2px 4px #000; /* Add a shadow effect to the text */
      }
    </style>
    <div class="title-panel">
      <div class="title-text"><em><strong>Australian Housing Prices</strong></em></div>
    </div>
  ')
  ),
  br(),
  fluidRow(
    column(3,
           h3("Statistical Insights:"),
           tags$p(
             h3("2016"),
             tags$ul(
               tags$li("The number of houses sold in Melbourne in 2016 was high, with approximately 8,978 properties sold."),
               tags$li("Property prices in 2016 increased, with an average price of about $1,069,062."),
               tags$li("\"Property Sold\" was the preferred selling method, with an average price of approximately $1,054,218."),
               tags$li("Houses were the preferred property type, with an average price of around $1,145,553."),
               tags$li("The Southern Metropolitan region led in property sales, and prices were higher closer to the CBD.")
             )
           ),
           
           tags$p(
             h3("2017"),
             tags$ul(
               tags$li("In 2017, the number of houses sold decreased to around 4,845."),
               tags$li("Property prices showed a slight decline, with an average price of about $1,030,183."),
               tags$li("\"Property Sold\" remained the preferred method, with an average price of approximately $1,017,347."),
               tags$li("Houses continued to be the preferred property type, with an average price of approximately $1,103,283."),
               tags$li("The Southern Metropolitan region remained a top choice for property sales, and the price-distance relationship from the CBD persisted.")
             )
           )
    ),
    br(),
    br(),
    column(6,
           leafletOutput("map_plot"),
           br(),
           br(),
           br(),
           h3(HTML('<em>Let\'s look at the prices over time!</em>'), align = "center"),
           br(),
           plotlyOutput("time_plot")
    ),
    column(3,
           selectInput("map_view", "Change View", choices = names(map_tile_providers), selected = "Light"),  # Dropdown for views
           br(),
           selectInput("suburbs", "Select Suburbs", multiple = TRUE, choices = NULL),   # Dropdown for suburbs
           br(),
           checkboxGroupInput("property_type", "Select Property Types", choices = NULL),   # Checkboxes for property types
           br(),
           br(),
           br(),
           br(),
           br(),
           br(),
           br(),
           br(),
           br(),
           br(),
           br(),
           br(),
           br(),
           radioButtons("time_unit", "Time Unit:", choices = c("Month", "Day"), selected = "Month"),
           sliderInput("time_range", "Select Time Range:",
                       min = 1, max = length(unique(dataset$Date)), 
                       value = c(1, length(unique(dataset$Date))),
                       step = 1)
    )
  ),
  fluidRow(
    column(6,
           br(),
           h3(HTML('<em>Predicted Housing Prices for 2018</em>'), align = "center"),
           plotlyOutput("predicted_price_plot"),
    ),
    br(),
    br(),
    column(6,
           br(),
           br(),
           tags$p(
             h4("Based on the Machine Learning Model and its predictions, we've gained valuable insights into Australian housing prices."),
             tags$ul(
               tags$li("The model, trained on historical data, takes into account factors such as the year, distance from the central business district, postcode, land size, and property count to predict housing prices."),
               tags$li("The predictions for the year 2018 indicate that while prices showed a slight decline in 2017, they rebounded in 2018."),
               tags$li("The model's insights reveal that property values tend to vary significantly based on their proximity to the city center, and features like land size and property count play a crucial role in determining price fluctuations. "),
               tags$li("These insights can guide both homebuyers and real estate investors in making informed decisions, emphasizing the importance of location and property attributes in the Australian housing market."),
             )
           )
    )
  )
)

# Define the server logic
server <- function(input, output, session) {
  observe({
    # Populate the "Select Suburbs" dropdown with unique suburbs from the dataset
    updateSelectInput(session, "suburbs", choices = unique(dataset$Suburb))
    
    # Populate the "Select Property Types" checkbox group with unique property types from the dataset
    updateCheckboxGroupInput(session, "property_type", choices = unique(dataset$Type))
  })
  
  # Create a reactive subset of the dataset based on user input
  filtered_data <- reactive({
    data <- dataset
    if (!is.null(input$suburbs) && length(input$suburbs) > 0) {
      data <- data[data$Suburb %in% input$suburbs, ]
    }
    if (!is.null(input$property_type) && length(input$property_type) > 0) {
      data <- data[data$Type %in% input$property_type, ]
    }
    data
  })
  
  # Update the slider values 
  observeEvent(input$time_unit, {
    unique_dates <- unique(dataset$Date)
    if (input$time_unit == "Month") {
      updateSliderInput(session, "time_range", min = min(unique_dates), max = max(unique_dates), value = c(min(unique_dates), max(unique_dates))
      )
    } else if (input$time_unit == "Day") {
      updateSliderInput(session, "time_range", min = min(unique_dates), max = max(unique_dates), value = c(min(unique_dates), max(unique_dates))
      )
    }
  })
  
  # Plot the map
  output$map_plot <- renderLeaflet({
    leaflet(dataset) %>%
      addProviderTiles(
        map_tile_providers[[input$map_view]],
        options = providerTileOptions(updateWhenZooming = FALSE)
      ) %>%
      addCircleMarkers(
        data = filtered_data(),
        lat = ~Lattitude,
        lng = ~Longtitude,
        color = ~region_colors(Regionname),
        fillOpacity = 0.7,
        stroke = TRUE,
        radius = 5,
        popup = ~paste("Suburb: ", Suburb, "<br>",
                       "Region Name: ", Regionname, "<br>",
                       "Average Price: $", round(mean(Price), 2), "<br>",
                       "Distance from CBD: ", round(Distance,2), " km<br>",
                       "Property Type:", Type)
      ) %>%
      addLegend(
        "bottomright",  # Adjust the legend position
        pal = region_colors,  # color palette defined above
        values = ~Regionname,  # The variable for which legend is being added
        title = "Regions"  # Legend title
      )
  })
  
  # Replaced the code for the interactive time-based bar chart with a line chart
output$time_plot <- renderPlotly({
  data <- filtered_data()
  
  # Get the selected range from the slider
  selected_range <- input$time_range
  
  # Filter data based on the selected range
  data <- data[data$Date >= selected_range[1] & data$Date <= selected_range[2], ]
  
  # Calculate the time unit (month or day)
  time_unit <- switch(input$time_unit,
                      "Month" = as.numeric(format(data$Date, "%m")),  # Convert month to numeric
                      "Day" = as.numeric(format(data$Date, "%d"))  # Convert day to numeric
  )
  
  # Create a summary table to calculate the average price by time unit
  summary_data <- data %>%
    group_by(Time_Unit = time_unit, Year = as.numeric(format(data$Date, "%Y"))) %>%
    summarize(Average_Price = mean(Price), .groups = 'drop')
  
  
  # Create a line chart with separate lines for each year
  plot_data <- ggplot(summary_data, aes(x = Time_Unit, y = Average_Price, color = as.factor(Year))) +
    geom_line() +
    labs(x = if (input$time_unit == "Month") "Month" else "Day", y = "Average Price") +
    theme_minimal() +
    scale_x_continuous(breaks = unique(summary_data$Time_Unit),
                       labels = if (input$time_unit == "Month") month.abb[unique(summary_data$Time_Unit)] else unique(summary_data$Time_Unit)) +
    scale_y_continuous(labels = scales::comma) +
    theme(panel.grid.major = element_blank(),
          panel.grid.minor = element_blank(),
          panel.background = element_blank())+
    scale_color_discrete(name = "Year")  # Change the legend title to "Year"
  
  
  if (input$time_unit == "Day") {
    plot_data <- plot_data +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
  }
  
  ggplotly(plot_data, tooltip = c("Date", "Average_Price", "Year"))
})
      
      # Data Preprocessing
      dataset <- na.omit(dataset)  # Remove rows with null values

      # Generate random values for 'distance,' 'postcode,' 'landsize,' and 'property count' based on 2016 and 2017 data
      set.seed(123)  # For reproducibility
      dataset$Distance <- runif(nrow(dataset), min = 1, max = 50)
      dataset$Landsize <- runif(nrow(dataset), min = 100, max = 1000)
      
      # Generate unique values for 'Postcode' and 'PropertyCount' based on the data
      unique_postcodes <- unique(dataset$Postcode)
      unique_property_counts <- unique(dataset$Propertycount)
      
      dataset$Postcode <- sample(unique_postcodes, nrow(dataset), replace = TRUE)
      dataset$Propertycount <- sample(unique_property_counts, nrow(dataset), replace = TRUE)
      
      # Create a date range for 2018
      year_2018 <- seq(as.Date("2018-01-01"), as.Date("2018-12-31"), by = "1 day")
      
      # Create a data frame for 2018 with dates
      data_2018 <- data.frame(Date = year_2018)
      
      # Extract the year from the Date column in the historical data
      dataset$Year <- as.numeric(format(dataset$Date, "%Y"))
      
      # Fit a random forest model using the historical data and new features
      model <- randomForest(Price ~ Year + Distance + Postcode + Landsize + Propertycount, data = dataset)
      
      # Predict prices for 2018
      data_2018$Year <- as.numeric(format(data_2018$Date, "%Y"))
      data_2018$Distance <- runif(nrow(data_2018), min = 1, max = 50)
      data_2018$Landsize <- runif(nrow(data_2018), min = 100, max = 1000)
      
      # Generate unique values for 'Postcode' and 'PropertyCount' for 2018
      data_2018$Postcode <- sample(unique_postcodes, nrow(data_2018), replace = TRUE)
      data_2018$Propertycount <- sample(unique_property_counts, nrow(data_2018), replace = TRUE)
      
      data_2018$Price <- predict(model, newdata = data_2018)
      
      # Create an interactive line chart for predicted 2018 prices
      output$predicted_price_plot <- renderPlotly({
        plot_data_2018 <- ggplot(data_2018, aes(x = Date, y = Price)) +
          geom_line(color = "blue") +
          labs(x = "Date", y = "Price") +
          theme_minimal()
        
        ggplotly(plot_data_2018, tooltip = c("Date", "Price"))
      })
}

# Run the application
shinyApp(ui, server)
